{"ts":1355335856672,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"using System;\r\nusing System.Collections.Generic;\r\nusing System.Collections.Specialized;\r\nusing System.Configuration;\r\nusing System.Data;\r\nusing System.Data.Common;\r\nusing System.Dynamic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing System.Data.SqlClient;\r\nusing System.Text.RegularExpressions;\r\n\r\nnamespace Massive {\r\n    public static class ObjectExtensions {\r\n        /// <summary>\r\n        /// Extension method for adding in a bunch of parameters\r\n        /// </summary>\r\n        public static void AddParams(this DbCommand cmd, params object[] args) {\r\n            foreach (var item in args) {\r\n                AddParam(cmd, item);\r\n            }\r\n        }\r\n        /// <summary>\r\n        /// Extension for adding single parameter\r\n        /// </summary>\r\n        public static void AddParam(this DbCommand cmd, object item) {\r\n            var p = cmd.CreateParameter();\r\n            p.ParameterName = string.Format(\"@{0}\", cmd.Parameters.Count);\r\n            if (item == null) {\r\n                p.Value = DBNull.Value;\r\n            } else {\r\n                if (item.GetType() == typeof(Guid)) {\r\n                    p.Value = item.ToString();\r\n                    p.DbType = DbType.String;\r\n                    p.Size = 4000;\r\n                } else if (item.GetType() == typeof(ExpandoObject)) {\r\n                    var d = (IDictionary<string, object>)item;\r\n                    p.Value = d.Values.FirstOrDefault();\r\n                } else {\r\n                    p.Value = item;\r\n                }\r\n                if (item.GetType() == typeof(string))\r\n                    p.Size = ((string)item).Length > 4000 ? -1 : 4000;\r\n            }\r\n            cmd.Parameters.Add(p);\r\n        }\r\n        /// <summary>\r\n        /// Turns an IDataReader to a Dynamic list of things\r\n        /// </summary>\r\n        public static List<dynamic> ToExpandoList(this IDataReader rdr) {\r\n            var result = new List<dynamic>();\r\n            while (rdr.Read()) {\r\n                result.Add(rdr.RecordToExpando());\r\n            }\r\n            return result;\r\n        }\r\n        public static dynamic RecordToExpando(this IDataReader rdr) {\r\n            dynamic e = new ExpandoObject();\r\n            var d = e as IDictionary<string, object>;\r\n            for (int i = 0; i < rdr.FieldCount; i++)\r\n                d.Add(rdr.GetName(i), DBNull.Value.Equals(rdr[i]) ? null : rdr[i]);\r\n            return e;\r\n        }\r\n        /// <summary>\r\n        /// Turns the object into an ExpandoObject\r\n        /// </summary>\r\n        public static dynamic ToExpando(this object o) {\r\n            var result = new ExpandoObject();\r\n            var d = result as IDictionary<string, object>; //work with the Expando as a Dictionary\r\n            if (o.GetType() == typeof(ExpandoObject)) return o; //shouldn't have to... but just in case\r\n            if (o.GetType() == typeof(NameValueCollection) || o.GetType().IsSubclassOf(typeof(NameValueCollection))) {\r\n                var nv = (NameValueCollection)o;\r\n                nv.Cast<string>().Select(key => new KeyValuePair<string, object>(key, nv[key])).ToList().ForEach(i => d.Add(i));\r\n            } else {\r\n                var props = o.GetType().GetProperties();\r\n                foreach (var item in props) {\r\n                    d.Add(item.Name, item.GetValue(o, null));\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Turns the object into a Dictionary\r\n        /// </summary>\r\n        public static IDictionary<string, object> ToDictionary(this object thingy) {\r\n            return (IDictionary<string, object>)thingy.ToExpando();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Convenience class for opening/executing data\r\n    /// </summary>\r\n    public static class DB {\r\n        public static DynamicModel Current {\r\n            get {\r\n                if (ConfigurationManager.ConnectionStrings.Count > 1) {\r\n                    return new DynamicModel(ConfigurationManager.ConnectionStrings[1].Name);\r\n                }\r\n                throw new InvalidOperationException(\"Need a connection string name - can't determine what it is\");\r\n            }\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// A class that wraps your database table in Dynamic Funtime\r\n    /// </summary>\r\n    public class DynamicModel : DynamicObject {\r\n        DbProviderFactory _factory;\r\n        string ConnectionString;\r\n        public static DynamicModel Open(string connectionStringName) {\r\n            dynamic dm = new DynamicModel(connectionStringName);\r\n            return dm;\r\n        }\r\n        public DynamicModel(string connectionStringName, string tableName = \"\",\r\n            string primaryKeyField = \"\", string descriptorField = \"\") {\r\n            TableName = tableName == \"\" ? this.GetType().Name : tableName;\r\n            PrimaryKeyField = string.IsNullOrEmpty(primaryKeyField) ? \"ID\" : primaryKeyField;\r\n            DescriptorField = descriptorField;\r\n            var _providerName = \"System.Data.SqlClient\";\r\n            \r\n            if(ConfigurationManager.ConnectionStrings[connectionStringName].ProviderName != null)\r\n                _providerName = ConfigurationManager.ConnectionStrings[connectionStringName].ProviderName;\r\n            \r\n            _factory = DbProviderFactories.GetFactory(_providerName);\r\n            ConnectionString = ConfigurationManager.ConnectionStrings[connectionStringName].ConnectionString;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Creates a new Expando from a Form POST - white listed against the columns in the DB\r\n        /// </summary>\r\n        public dynamic CreateFrom(NameValueCollection coll) {\r\n            dynamic result = new ExpandoObject();\r\n            var dc = (IDictionary<string, object>)result;\r\n            var schema = Schema;\r\n            //loop the collection, setting only what's in the Schema\r\n            foreach (var item in coll.Keys) {\r\n                var exists = schema.Any(x => x.COLUMN_NAME.ToLower() == item.ToString().ToLower());\r\n                if (exists) {\r\n                    var key = item.ToString();\r\n                    var val = coll[key];\r\n                    dc.Add(key, val);\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n        /// <summary>\r\n        /// Gets a default value for the column\r\n        /// </summary>\r\n        public dynamic DefaultValue(dynamic column) {\r\n            dynamic result = null;\r\n            string def = column.COLUMN_DEFAULT;\r\n            if (String.IsNullOrEmpty(def)) {\r\n                result = null;\r\n            } else if (def == \"getdate()\" || def == \"(getdate())\") {\r\n                result = DateTime.Now.ToShortDateString();\r\n            } else if (def == \"newid()\") {\r\n                result = Guid.NewGuid().ToString();\r\n            } else {\r\n                result = def.Replace(\"(\", \"\").Replace(\")\", \"\");\r\n            }\r\n            return result;\r\n        }\r\n        /// <summary>\r\n        /// Creates an empty Expando set with defaults from the DB\r\n        /// </summary>\r\n        public dynamic Prototype {\r\n            get {\r\n                dynamic result = new ExpandoObject();\r\n                var schema = Schema;\r\n                foreach (dynamic column in schema) {\r\n                    var dc = (IDictionary<string, object>)result;\r\n                    dc.Add(column.COLUMN_NAME, DefaultValue(column));\r\n                }\r\n                result._Table = this;\r\n                return result;\r\n            }\r\n        }\r\n        public string DescriptorField { get; protected set; }\r\n        /// <summary>\r\n        /// List out all the schema bits for use with ... whatever\r\n        /// </summary>\r\n        IEnumerable<dynamic> _schema;\r\n        public IEnumerable<dynamic> Schema {\r\n            get {\r\n                if (_schema == null)\r\n                    _schema = Query(\"SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @0\", TableName);\r\n                return _schema;\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Enumerates the reader yielding the result - thanks to Jeroen Haegebaert\r\n        /// </summary>\r\n        public virtual IEnumerable<dynamic> Query(string sql, params object[] args) {\r\n            using (var conn = OpenConnection()) {\r\n                var rdr = CreateCommand(sql, conn, args).ExecuteReader();\r\n                while (rdr.Read()) {\r\n                    yield return rdr.RecordToExpando(); ;\r\n                }\r\n            }\r\n        }\r\n        public virtual IEnumerable<dynamic> Query(string sql, DbConnection connection, params object[] args) {\r\n            using (var rdr = CreateCommand(sql, connection, args).ExecuteReader()) {\r\n                while (rdr.Read()) {\r\n                    yield return rdr.RecordToExpando(); ;\r\n                }\r\n            }\r\n        }\r\n        /// <summary>\r\n        /// Returns a single result\r\n        /// </summary>\r\n        public virtual object Scalar(string sql, params object[] args) {\r\n            object result = null;\r\n            using (var conn = OpenConnection()) {\r\n                result = CreateCommand(sql, conn, args).ExecuteScalar();\r\n            }\r\n            return result;\r\n        }\r\n        /// <summary>\r\n        /// Creates a DBCommand that you can use for loving your database.\r\n        /// </summary>\r\n        DbCommand CreateCommand(string sql, DbConnection conn, params object[] args) {\r\n            var result = _factory.CreateCommand();\r\n            result.Connection = conn;\r\n            result.CommandText = sql;\r\n            if (args.Length > 0)\r\n                result.AddParams(args);\r\n            return result;\r\n        }\r\n        /// <summary>\r\n        /// Returns and OpenConnection\r\n        /// </summary>\r\n        public virtual DbConnection OpenConnection() {\r\n            var result = _factory.CreateConnection();\r\n            result.ConnectionString = ConnectionString;\r\n            result.Open();\r\n            return result;\r\n        }\r\n        /// <summary>\r\n        /// Builds a set of Insert and Update commands based on the passed-on objects.\r\n        /// These objects can be POCOs, Anonymous, NameValueCollections, or Expandos. Objects\r\n        /// With a PK property (whatever PrimaryKeyField is set to) will be created at UPDATEs\r\n        /// </summary>\r\n        public virtual List<DbCommand> BuildCommands(params object[] things) {\r\n            var commands = new List<DbCommand>();\r\n            foreach (var item in things) {\r\n                if (HasPrimaryKey(item)) {\r\n                    commands.Add(CreateUpdateCommand(item.ToExpando(), GetPrimaryKey(item)));\r\n                } else {\r\n                    commands.Add(CreateInsertCommand(item.ToExpando()));\r\n                }\r\n            }\r\n            return commands;\r\n        }\r\n\r\n\r\n        public virtual int Execute(DbCommand command) {\r\n            return Execute(new DbCommand[] { command });\r\n        }\r\n\r\n        public virtual int Execute(string sql, params object[] args) {\r\n            return Execute(CreateCommand(sql, null, args));\r\n        }\r\n        /// <summary>\r\n        /// Executes a series of DBCommands in a transaction\r\n        /// </summary>\r\n        public virtual int Execute(IEnumerable<DbCommand> commands) {\r\n            var result = 0;\r\n            using (var conn = OpenConnection()) {\r\n                using (var tx = conn.BeginTransaction()) {\r\n                    foreach (var cmd in commands) {\r\n                        cmd.Connection = conn;\r\n                        cmd.Transaction = tx;\r\n                        result += cmd.ExecuteNonQuery();\r\n                    }\r\n                    tx.Commit();\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n        public virtual string PrimaryKeyField { get; set; }\r\n        /// <summary>\r\n        /// Conventionally introspects the object passed in for a field that \r\n        /// looks like a PK. If you've named your PrimaryKeyField, this becomes easy\r\n        /// </summary>\r\n        public virtual bool HasPrimaryKey(object o) {\r\n            return o.ToDictionary().ContainsKey(PrimaryKeyField);\r\n        }\r\n        /// <summary>\r\n        /// If the object passed in has a property with the same name as your PrimaryKeyField\r\n        /// it is returned here.\r\n        /// </summary>\r\n        public virtual object GetPrimaryKey(object o) {\r\n            object result = null;\r\n            o.ToDictionary().TryGetValue(PrimaryKeyField, out result);\r\n            return result;\r\n        }\r\n        public virtual string TableName { get; set; }\r\n        /// <summary>\r\n        /// Returns all records complying with the passed-in WHERE clause and arguments, \r\n        /// ordered as specified, limited (TOP) by limit.\r\n        /// </summary>\r\n        public virtual IEnumerable<dynamic> All(string where = \"\", string orderBy = \"\", int limit = 0, string columns = \"*\", params object[] args) {\r\n            string sql = BuildSelect(where, orderBy, limit);\r\n            return Query(string.Format(sql, columns, TableName), args);\r\n        }\r\n        private static string BuildSelect(string where, string orderBy, int limit) {\r\n            string sql = limit > 0 ? \"SELECT TOP \" + limit + \" {0} FROM {1} \" : \"SELECT {0} FROM {1} \";\r\n            if (!string.IsNullOrEmpty(where))\r\n                sql += where.Trim().StartsWith(\"where\", StringComparison.OrdinalIgnoreCase) ? where : \" WHERE \" + where;\r\n            if (!String.IsNullOrEmpty(orderBy))\r\n                sql += orderBy.Trim().StartsWith(\"order by\", StringComparison.OrdinalIgnoreCase) ? orderBy : \" ORDER BY \" + orderBy;\r\n            return sql;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Returns a dynamic PagedResult. Result properties are Items, TotalPages, and TotalRecords.\r\n        /// </summary>\r\n        public virtual dynamic Paged(string where = \"\", string orderBy = \"\", string columns = \"*\", int pageSize = 20, int currentPage = 1, params object[] args)\r\n        {\r\n            return BuildPagedResult(where: where, orderBy: orderBy, columns: columns, pageSize: pageSize, currentPage: currentPage, args: args);\r\n        }\r\n\r\n        public virtual dynamic Paged(string sql, string primaryKey, string where = \"\", string orderBy = \"\", string columns = \"*\", int pageSize = 20, int currentPage = 1, params object[] args)\r\n        {\r\n            return BuildPagedResult(sql, primaryKey, where, orderBy, columns, pageSize, currentPage, args);\r\n        }\r\n\r\n        private dynamic BuildPagedResult(string sql = \"\", string primaryKeyField = \"\", string where = \"\", string orderBy = \"\", string columns = \"*\", int pageSize = 20, int currentPage = 1, params object[] args)\r\n        {\r\n            dynamic result = new ExpandoObject();\r\n            var countSQL = \"\";\r\n            if (!string.IsNullOrEmpty(sql))\r\n                countSQL = string.Format(\"SELECT COUNT({0}) FROM ({1}) AS PagedTable\", primaryKeyField, sql);\r\n            else\r\n                countSQL = string.Format(\"SELECT COUNT({0}) FROM {1}\", PrimaryKeyField, TableName);\r\n\r\n            if (String.IsNullOrEmpty(orderBy))\r\n            {\r\n                orderBy = string.IsNullOrEmpty(primaryKeyField) ? PrimaryKeyField : primaryKeyField;\r\n            }\r\n\r\n            if (!string.IsNullOrEmpty(where))\r\n            {\r\n                if (!where.Trim().StartsWith(\"where\", StringComparison.CurrentCultureIgnoreCase))\r\n                {\r\n                    where = \" WHERE \" + where;\r\n                }\r\n            }\r\n\r\n            var query = \"\";\r\n            if (!string.IsNullOrEmpty(sql))\r\n                query = string.Format(\"SELECT {0} FROM (SELECT ROW_NUMBER() OVER (ORDER BY {2}) AS Row, {0} FROM ({3}) AS PagedTable {4}) AS Paged \", columns, pageSize, orderBy, sql, where);\r\n            else\r\n                query = string.Format(\"SELECT {0} FROM (SELECT ROW_NUMBER() OVER (ORDER BY {2}) AS Row, {0} FROM {3} {4}) AS Paged \", columns, pageSize, orderBy, TableName, where);\r\n\r\n            var pageStart = (currentPage - 1) * pageSize;\r\n            query += string.Format(\" WHERE Row > {0} AND Row <={1}\", pageStart, (pageStart + pageSize));\r\n            countSQL += where;\r\n            result.TotalRecords = Scalar(countSQL, args);\r\n            result.TotalPages = result.TotalRecords / pageSize;\r\n            if (result.TotalRecords % pageSize > 0)\r\n                result.TotalPages += 1;\r\n            result.Items = Query(string.Format(query, columns, TableName), args);\r\n            return result;\r\n        }\r\n        /// <summary>\r\n        /// Returns a single row from the database\r\n        /// </summary>\r\n        public virtual dynamic Single(string where, params object[] args) {\r\n            var sql = string.Format(\"SELECT * FROM {0} WHERE {1}\", TableName, where);\r\n            return Query(sql, args).FirstOrDefault();\r\n        }\r\n        /// <summary>\r\n        /// Returns a single row from the database\r\n        /// </summary>\r\n        public virtual dynamic Single(object key, string columns = \"*\") {\r\n            var sql = string.Format(\"SELECT {0} FROM {1} WHERE {2} = @0\", columns, TableName, PrimaryKeyField);\r\n            return Query(sql, key).FirstOrDefault();\r\n        }\r\n        /// <summary>\r\n        /// This will return a string/object dictionary for dropdowns etc\r\n        /// </summary>\r\n        public virtual IDictionary<string, object> KeyValues(string orderBy = \"\") {\r\n            if (String.IsNullOrEmpty(DescriptorField))\r\n                throw new InvalidOperationException(\"There's no DescriptorField set - do this in your constructor to describe the text value you want to see\");\r\n            var sql = string.Format(\"SELECT {0},{1} FROM {2} \", PrimaryKeyField, DescriptorField, TableName);\r\n            if (!String.IsNullOrEmpty(orderBy))\r\n                sql += \"ORDER BY \" + orderBy;\r\n\r\n            var results = Query(sql).ToList().Cast<IDictionary<string, object>>();\r\n            return results.ToDictionary(key => key[PrimaryKeyField].ToString(), value => value[DescriptorField]);\r\n        }\r\n\r\n        /// <summary>\r\n        /// This will return an Expando as a Dictionary\r\n        /// </summary>\r\n        public virtual IDictionary<string, object> ItemAsDictionary(ExpandoObject item) {\r\n            return (IDictionary<string, object>)item;\r\n        }\r\n        //Checks to see if a key is present based on the passed-in value\r\n        public virtual bool ItemContainsKey(string key, ExpandoObject item) {\r\n            var dc = ItemAsDictionary(item);\r\n            return dc.ContainsKey(key);\r\n        }\r\n        /// <summary>\r\n        /// Executes a set of objects as Insert or Update commands based on their property settings, within a transaction.\r\n        /// These objects can be POCOs, Anonymous, NameValueCollections, or Expandos. Objects\r\n        /// With a PK property (whatever PrimaryKeyField is set to) will be created at UPDATEs\r\n        /// </summary>\r\n        public virtual int Save(params object[] things) {\r\n            foreach (var item in things) {\r\n                if (!IsValid(item)) {\r\n                    throw new InvalidOperationException(\"Can't save this item: \" + String.Join(\"; \", Errors.ToArray()));\r\n                }\r\n            }\r\n            var commands = BuildCommands(things);\r\n            return Execute(commands);\r\n        }\r\n        public virtual DbCommand CreateInsertCommand(dynamic expando) {\r\n            DbCommand result = null;\r\n            var settings = (IDictionary<string, object>)expando;\r\n            var sbKeys = new StringBuilder();\r\n            var sbVals = new StringBuilder();\r\n            var stub = \"INSERT INTO [{0}] ({1}) \\r\\n VALUES ({2})\";\r\n            result = CreateCommand(stub, null);\r\n            int counter = 0;\r\n            foreach (var item in settings) {\r\n                sbKeys.AppendFormat(\"{0},\", item.Key);\r\n                sbVals.AppendFormat(\"@{0},\", counter.ToString());\r\n                result.AddParam(item.Value);\r\n                counter++;\r\n            }\r\n            if (counter > 0) {\r\n                var keys = sbKeys.ToString().Substring(0, sbKeys.Length - 1);\r\n                var vals = sbVals.ToString().Substring(0, sbVals.Length - 1);\r\n                var sql = string.Format(stub, TableName, keys, vals);\r\n                result.CommandText = sql;\r\n            } else throw new InvalidOperationException(\"Can't parse this object to the database - there are no properties set\");\r\n            return result;\r\n        }\r\n        /// <summary>\r\n        /// Creates a command for use with transactions - internal stuff mostly, but here for you to play with\r\n        /// </summary>\r\n        public virtual DbCommand CreateUpdateCommand(dynamic expando, object key) {\r\n            var settings = (IDictionary<string, object>)expando;\r\n            var sbKeys = new StringBuilder();\r\n            var stub = \"UPDATE {0} SET {1} WHERE {2} = @{3}\";\r\n            var args = new List<object>();\r\n            var result = CreateCommand(stub, null);\r\n            int counter = 0;\r\n            foreach (var item in settings) {\r\n                var val = item.Value;\r\n                if (!item.Key.Equals(PrimaryKeyField, StringComparison.OrdinalIgnoreCase) && item.Value != null) {\r\n                    result.AddParam(val);\r\n                    sbKeys.AppendFormat(\"{0} = @{1}, \\r\\n\", item.Key, counter.ToString());\r\n                    counter++;\r\n                }\r\n            }\r\n            if (counter > 0) {\r\n                //add the key\r\n                result.AddParam(key);\r\n                //strip the last commas\r\n                var keys = sbKeys.ToString().Substring(0, sbKeys.Length - 4);\r\n                result.CommandText = string.Format(stub, TableName, keys, PrimaryKeyField, counter);\r\n            } else throw new InvalidOperationException(\"No parsable object was sent in - could not divine any name/value pairs\");\r\n            return result;\r\n        }\r\n        /// <summary>\r\n        /// Removes one or more records from the DB according to the passed-in WHERE\r\n        /// </summary>\r\n        public virtual DbCommand CreateDeleteCommand(string where = \"\", object key = null, params object[] args) {\r\n            var sql = string.Format(\"DELETE FROM {0} \", TableName);\r\n            if (key != null) {\r\n                sql += string.Format(\"WHERE {0}=@0\", PrimaryKeyField);\r\n                args = new object[] { key };\r\n            } else if (!string.IsNullOrEmpty(where)) {\r\n                sql += where.Trim().StartsWith(\"where\", StringComparison.OrdinalIgnoreCase) ? where : \"WHERE \" + where;\r\n            }\r\n            return CreateCommand(sql, null, args);\r\n        }\r\n\r\n        public bool IsValid(dynamic item) {\r\n            Errors.Clear();\r\n            Validate(item);\r\n            return Errors.Count == 0;\r\n        }\r\n\r\n        //Temporary holder for error messages\r\n        public IList<string> Errors = new List<string>();\r\n        /// <summary>\r\n        /// Adds a record to the database. You can pass in an Anonymous object, an ExpandoObject,\r\n        /// A regular old POCO, or a NameValueColletion from a Request.Form or Request.QueryString\r\n        /// </summary>\r\n        public virtual dynamic Insert(object o) {\r\n            var ex = o.ToExpando();\r\n            if (!IsValid(ex)) {\r\n                throw new InvalidOperationException(\"Can't insert: \" + String.Join(\"; \", Errors.ToArray()));\r\n            }\r\n            if (BeforeSave(ex)) {\r\n                using (dynamic conn = OpenConnection()) {\r\n                    var cmd = CreateInsertCommand(ex);\r\n                    cmd.Connection = conn;\r\n                    cmd.ExecuteNonQuery();\r\n                    cmd.CommandText = \"SELECT @@IDENTITY as newID\";\r\n                    ex.ID = cmd.ExecuteScalar();\r\n                    Inserted(ex);\r\n                }\r\n                return ex;\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n        /// <summary>\r\n        /// Updates a record in the database. You can pass in an Anonymous object, an ExpandoObject,\r\n        /// A regular old POCO, or a NameValueCollection from a Request.Form or Request.QueryString\r\n        /// </summary>\r\n        public virtual int Update(object o, object key) {\r\n            var ex = o.ToExpando();\r\n            if (!IsValid(ex)) {\r\n                throw new InvalidOperationException(\"Can't Update: \" + String.Join(\"; \", Errors.ToArray()));\r\n            }\r\n            var result = 0;\r\n            if (BeforeSave(ex)) {\r\n                result = Execute(CreateUpdateCommand(ex, key));\r\n                Updated(ex);\r\n            }\r\n            return result;\r\n        }\r\n        /// <summary>\r\n        /// Removes one or more records from the DB according to the passed-in WHERE\r\n        /// </summary>\r\n        public int Delete(object key = null, string where = \"\", params object[] args) {\r\n            var deleted = this.Single(key);\r\n            var result = 0;\r\n            if (BeforeDelete(deleted)) {\r\n                result = Execute(CreateDeleteCommand(where: where, key: key, args: args));\r\n                Deleted(deleted);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        public void DefaultTo(string key, object value, dynamic item) {\r\n            if (!ItemContainsKey(key, item)) {\r\n                var dc = (IDictionary<string, object>)item;\r\n                dc[key] = value;\r\n            }\r\n        }\r\n\r\n        //Hooks\r\n        public virtual void Validate(dynamic item) { }\r\n        public virtual void Inserted(dynamic item) { }\r\n        public virtual void Updated(dynamic item) { }\r\n        public virtual void Deleted(dynamic item) { }\r\n        public virtual bool BeforeDelete(dynamic item) { return true; }\r\n        public virtual bool BeforeSave(dynamic item) { return true; }\r\n\r\n        //validation methods\r\n        public virtual void ValidatesPresenceOf(object value, string message = \"Required\") {\r\n            if (value == null)\r\n                Errors.Add(message);\r\n            if (String.IsNullOrEmpty(value.ToString()))\r\n                Errors.Add(message);\r\n        }\r\n        //fun methods\r\n        public virtual void ValidatesNumericalityOf(object value, string message = \"Should be a number\") {\r\n            var type = value.GetType().Name;\r\n            var numerics = new string[] { \"Int32\", \"Int16\", \"Int64\", \"Decimal\", \"Double\", \"Single\", \"Float\" };\r\n            if (!numerics.Contains(type)) {\r\n                Errors.Add(message);\r\n            }\r\n        }\r\n        public virtual void ValidateIsCurrency(object value, string message = \"Should be money\") {\r\n            if (value == null)\r\n                Errors.Add(message);\r\n            decimal val = decimal.MinValue;\r\n            decimal.TryParse(value.ToString(), out val);\r\n            if (val == decimal.MinValue)\r\n                Errors.Add(message);\r\n\r\n\r\n        }\r\n        public int Count() {\r\n            return Count(TableName);\r\n        }\r\n        public int Count(string tableName, string where=\"\", params object[] args) {\r\n            return (int)Scalar(\"SELECT COUNT(*) FROM \" + tableName+\" \"+ where, args);\r\n        }\r\n\r\n        /// <summary>\r\n        /// A helpful query tool\r\n        /// </summary>\r\n        public override bool TryInvokeMember(InvokeMemberBinder binder, object[] args, out object result) {\r\n            //parse the method\r\n            var constraints = new List<string>();\r\n            var counter = 0;\r\n            var info = binder.CallInfo;\r\n            // accepting named args only... SKEET!\r\n            if (info.ArgumentNames.Count != args.Length) {\r\n                throw new InvalidOperationException(\"Please use named arguments for this type of query - the column name, orderby, columns, etc\");\r\n            }\r\n            //first should be \"FindBy, Last, Single, First\"\r\n            var op = binder.Name;\r\n            var columns = \" * \";\r\n            string orderBy = string.Format(\" ORDER BY {0}\", PrimaryKeyField);\r\n            string sql = \"\";\r\n            string where = \"\";\r\n            var whereArgs = new List<object>();\r\n\r\n            //loop the named args - see if we have order, columns and constraints\r\n            if (info.ArgumentNames.Count > 0) {\r\n\r\n                for (int i = 0; i < args.Length; i++) {\r\n                    var name = info.ArgumentNames[i].ToLower();\r\n                    switch (name) {\r\n                        case \"orderby\":\r\n                            orderBy = \" ORDER BY \" + args[i];\r\n                            break;\r\n                        case \"columns\":\r\n                            columns = args[i].ToString();\r\n                            break;\r\n                        default:\r\n                            constraints.Add(string.Format(\" {0} = @{1}\", name, counter));\r\n                            whereArgs.Add(args[i]);\r\n                            counter++;\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            //Build the WHERE bits\r\n            if (constraints.Count > 0) {\r\n                where = \" WHERE \" + string.Join(\" AND \", constraints.ToArray());\r\n            }\r\n            //probably a bit much here but... yeah this whole thing needs to be refactored...\r\n            if (op.ToLower() == \"count\") {\r\n                result = Scalar(\"SELECT COUNT(*) FROM \" + TableName + where, whereArgs.ToArray());\r\n            } else if (op.ToLower() == \"sum\") {\r\n                result = Scalar(\"SELECT SUM(\" + columns + \") FROM \" + TableName + where, whereArgs.ToArray());\r\n            } else if (op.ToLower() == \"max\") {\r\n                result = Scalar(\"SELECT MAX(\" + columns + \") FROM \" + TableName + where, whereArgs.ToArray());\r\n            } else if (op.ToLower() == \"min\") {\r\n                result = Scalar(\"SELECT MIN(\" + columns + \") FROM \" + TableName + where, whereArgs.ToArray());\r\n            } else if (op.ToLower() == \"avg\") {\r\n                result = Scalar(\"SELECT AVG(\" + columns + \") FROM \" + TableName + where, whereArgs.ToArray());\r\n            } else {\r\n\r\n                //build the SQL\r\n                sql = \"SELECT TOP 1 \" + columns + \" FROM \" + TableName + where;\r\n                var justOne = op.StartsWith(\"First\") || op.StartsWith(\"Last\") || op.StartsWith(\"Get\") || op.StartsWith(\"Single\");\r\n\r\n                //Be sure to sort by DESC on the PK (PK Sort is the default)\r\n                if (op.StartsWith(\"Last\")) {\r\n                    orderBy = orderBy + \" DESC \";\r\n                } else {\r\n                    //default to multiple\r\n                    sql = \"SELECT \" + columns + \" FROM \" + TableName + where;\r\n                }\r\n\r\n                if (justOne) {\r\n                    //return a single record\r\n                    result = Query(sql + orderBy, whereArgs.ToArray()).FirstOrDefault();\r\n                } else {\r\n                    //return lots\r\n                    result = Query(sql + orderBy, whereArgs.ToArray());\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n}"]],"start1":0,"start2":0,"length1":0,"length2":30972}]],"length":30972}
{"contributors":[],"silentsave":false,"ts":1355335947404,"patch":[[{"diffs":[[0,"Names[i]"],[-1,".ToLower()"],[0,";\r\n     "]],"start1":28271,"start2":28271,"length1":26,"length2":16},{"diffs":[[0,"ch (name"],[1,".ToLower()"],[0,") {\r\n   "]],"start1":28306,"start2":28306,"length1":16,"length2":26}]],"length":30972,"saved":false}
